<?xml version="1.0"?>
<!-- General purpose build script for applications.-->

<project name="GI-FORK" default="dist" basedir=".">
	<description>
       GI-FORK Main Application 4F
	</description>
	<property environment="env" />
	<!-- ================== Property Definitions ===================== -->

	<property file="build.properties" />
	<property file="${user.home}/build.properties" />

	<!-- ================= File and Directory Names ==================== -->

	<property name="app.name" value="GI-FORK" />
	<property name="app.version" value="2.0" />
	<property name="build.home" value="${basedir}/build" />
	<property name="bin.home" value="${basedir}/bin" />
	<property name="dist.home" value="${basedir}/dist4F" />

	<!-- Impostare questa variabile a ${dist.home} se si vogliono le libs nella radice -->
	<property name="dist.libs" value="${dist.home}/libs" />
	<!-- Impostare quale cartella di risorse si vuole distribuire -->

	<property name="main-class" value="application4F.GiForkMain_4F" />
	<property name="src.home" value="${basedir}/src" />

	<!-- Specifico la directory da dove importare librerie esterne (jar) nel progetto -->
	<property name="internal.lib" value="${basedir}/libs" />
	<property name="external.lib" value="${basedir}/libs/4F" />

	<!-- =============== Custom Ant Task Definitions =================== -->

	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />
	<property name="javaFx.lib" value="${env.PATH_TO_FX}"/>

	<path id="compile.classpath">
		<pathelement location="${src.home}" />
		<fileset dir="${internal.lib}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${external.lib}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${javaFx.lib}">
			<include name="*.jar" />
		</fileset>
	</path>

	<pathconvert property="manifest.classpath" pathsep=" ">
		<path refid="compile.classpath" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.jar" to="libs/*.jar" />
			</chainedmapper>
		</mapper>
	</pathconvert>

	<!-- =================== All Target ================================ -->
	<!--
    The "all" target is a shortcut for running the "clean" target
    followed by the "compile" target, to force a complete recompile.
    -->

	<target name="all" depends="clean,compile" description="Clean build and dist directories, then compile" />

	<!-- ================== Clean Target ============================== -->

	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${build.home}" />
		<!--<delete dir="${dist.home}" />-->
		<delete dir="${bin.home}" />
		<delete dir="${basedir}/traces" />
	</target>

	<!-- ================== Compile Target =========================== -->

	<target name="compile" depends="prepare" description="Compile Java sources">
		
		<!--Copia i commoms -->
		<copy todir="${internal.lib}">
			<fileset dir="../../Commons/GiForkCommonLib/dist/lib" includes="**/*.jar" />
		</copy>
		
		<mkdir dir="${build.home}/classes" />
		<javac encoding="UTF-8" includeantruntime="false" 
			srcdir="${src.home}" 
			destdir="${build.home}/classes" 
			debug="${compile.debug}" 
			deprecation="${compile.deprecation}" 
			optimize="${compile.optimize}">
			<exclude name="**/test/*" />
			<exclude name="**/applicationLIS/*" />
			<classpath refid="compile.classpath" />
		</javac>
		<copy todir="${build.home}/classes">
			<fileset dir="${src.home}">
				<exclude name="**/*.launch" />
				<exclude name="**/*.xtend" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${bin.home}">
			<fileset dir="${build.home}/classes" excludes="**/*.bak" />
		</copy>
	</target>

	<!-- =================== Dist Target ================================ -->

	<!-- impostare quale tipo di distribuzione si desidera -->
	<target name="dist" depends="clean,compile" description="Create binary distribution">
		<antcall target="dist_jar_separati">
		</antcall>
	</target>

	<!-- distribuzione con jar unico -->
	<target name="dist_jar_unico" depends="clean,compile" description="Create binary distribution">

		<!--Prepara il jar includendo i .class e tutti i .class dei jar dipendenti -->
		<jar destfile="${dist.home}/${app.name}.jar" filesetmanifest="mergewithoutmain" excludes="**/*.bak">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
				<attribute name="Class-Path" value="." />
			</manifest>
			<fileset dir="${build.home}/classes" />
			<zipgroupfileset dir="${internal.lib}/" includes="*.jar" excludes="META-INF/*.SF" />
			<zipgroupfileset dir="${external.lib}/" includes="*.jar" excludes="META-INF/*.SF" />
		</jar>

		<!--Copia le librerie che potrebbero servire ai plugins-->

		<!--Copia il resto dei file necessari alla dist_4Fribuzione -->
		<!-- <antcall target="-copy_other_dist_4F_files" /> -->


	</target>

	<!-- distribuzione con jar e librerie separate -->
	<target name="dist_jar_separati" depends="clean,compile" description="Create binary distribution">
		<basename property="basedir.name" file="." />

		<!--Prepara il jar includendo solo i .class del progetto -->
		<jar jarfile="${dist.home}/${app.name}.jar" basedir="${build.home}/classes" excludes="**/*.bak">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
				<attribute name="Class-Path" value="${manifest.classpath}" />
			</manifest>
		</jar>

		<!--Copia le librerie dipendenti-->
		<!--<copy todir="${dist.libs}">
			<fileset dir="${external.lib}" includes="**/*.jar" />
			<fileset dir="${internal.lib}" includes="**/*.jar" />
		</copy>-->

	</target>

	<target name="-copy_other_dist_files" description="copia il resto dei file necessari alla distribuzione">
		<!--Copia le risorse-->

		<!--Copia i plugins -->
		<copy todir="${dist.home}/plugins">
			<fileset dir="${basedir}/plugins" includes="**/*.jar" />
		</copy>

	</target>

	<!-- ================== Javadoc Target ============================ -->

	<target name="javadoc" depends="compile" description="Create Javadoc API documentation">

		<mkdir dir="${dist.home}/docs/api" />
		<javadoc sourcepath="${src.home}" destdir="${dist.home}/docs/api" packagenames="*" additionalparam="-Xdoclint:none">
			<classpath refid="compile.classpath" />
		</javadoc>

	</target>

	<!-- ================== Prepare Target ============================= -->

	<target name="prepare">
		<tstamp />
		<mkdir dir="${build.home}" />
		<mkdir dir="${build.home}/classes" />
	</target>

	<!-- ================== RmBak Target ============================= -->

	<target name="rmbak" description="Delete *.bak files everywhere">

		<delete>
			<fileset dir="${src.home}" includes="**/*.bak" />
		</delete>

	</target>

	<!-- ================== RmLog Target ============================= -->

	<target name="rmlog" description="Delete *.log files from build directory">

		<delete>
			<fileset dir="${build.home}" includes="**/*.log*" />
		</delete>

	</target>

</project>